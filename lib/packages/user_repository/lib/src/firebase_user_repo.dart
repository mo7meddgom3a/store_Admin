import 'dart:developer';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';

import '../user_repository.dart';

class FirebaseUserRepo implements UserRepository {
	final FirebaseAuth _firebaseAuth;

	final usersCollection = FirebaseFirestore.instance.collection('users');

	FirebaseUserRepo({
		FirebaseAuth? firebaseAuth,
	}) : _firebaseAuth = firebaseAuth ?? FirebaseAuth.instance;

	@override
  Stream<User?> get user {
		return _firebaseAuth.authStateChanges().map((firebaseUser) {
			return firebaseUser;
		});
	}

	@override
	@override
	@override
  Future<void> signIn(String email, String password) async {
    try {
      UserCredential userCredential = await _firebaseAuth.signInWithEmailAndPassword(
        email: email,
        password: password,
      );

      DocumentSnapshot userDataSnapshot = await usersCollection.doc(userCredential.user!.uid).get();
      Map<String, dynamic> userData = userDataSnapshot.data() as Map<String, dynamic>;

      // Check if the user has the role of an admin
      if (userData.containsKey('role') && userData['role'] == 'admin') {


      } else if (!userData.containsKey('role') && userData['role'] == 'user'){

        throw Exception('You do not have permission to log in.');
      }
    } catch (e) {
      log(e.toString());
      rethrow;
    }
  }

	@override
	Future<MyUser> signUp(MyUser myUser, String password) async {
		try {
			UserCredential userCredential = await _firebaseAuth.createUserWithEmailAndPassword(
				email: myUser.email,
				password: password,
			);

			// Update myUser with the userId generated by Firebase
			myUser = myUser.copyWith(
				userId: userCredential.user!.uid,
			);

			// Save user data to Firestore
			await setUserData(myUser);



			return myUser;
		} catch (e) {
			log(e.toString());
			rethrow;
		}
	}

	  @override
  Future<void> setUserData(MyUser myUser) async {
    try {
      await usersCollection
				.doc(myUser.userId)
				.set(myUser.toEntity().toDocument());

		} catch (e) {
      log(e.toString());
			rethrow;
    }
  }


	@override
	Future<void> logOut() async {
		await _firebaseAuth.signOut();
	}

}

